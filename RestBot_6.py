# –ü—Ä–∏–≤—è–∑–∫–∞ SQL –ª–∏–±–æ–≤

import mysql.connector
from mysql.connector import Error

# –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ª–∏–±–æ–≤

import telebot
from telebot import types

# –ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç—Ç—É–¥–∞

import RestToken
bot = telebot.TeleBot(RestToken.BotToken)
idchatbot = (RestToken.TeleBotId)
sqlhost = (RestToken.SQL_Serv)
sqluser = (RestToken.SQL_User)
sqlpsswd = (RestToken.SQL_Psswd)
sqlbd = (RestToken.SQL_BD)

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL

def create_server_connection(host_name, user_name, user_password):
	main_connection = None
	try:
		main_connection = mysql.connector.connect(
			host = host_name,
			user = user_name,
			passwd = user_password
		)
		print ("Connection to MySQL BD susseful")
	except Error as e:
		print (f"The error '{e}' occurred.")

	return main_connection

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

input(create_server_connection(sqlhost, sqluser, sqlpsswd))

def create_database(main_connection = create_server_connection(sqlhost, sqluser, sqlpsswd), query = ("CREATE DATABASE IF NOT EXISTS " + sqlbd)):
    cursor = main_connection.cursor()
    try:
        cursor.execute(query)
        print("Database created successfully")
    except Error as e:
        print(f"The error '{e}' occurred")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

input(sqlbd)

create_database()

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

def create_connection(host_name, user_name, user_password, db_name):
	connection = None
	try:
		connection = mysql.connector.connect(
			host = host_name,
			user = user_name,
			passwd = user_password,
			database = db_name
		)
		print ("Connection to MySQL BD susseful")
	except Error as e:
		print (f"The error '{e}' occurred.")

	return connection
	
connection = create_connection(sqlhost, sqluser, sqlpsswd, sqlbd)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
		
def execute_query(connection, query):
     cursor = connection.cursor()
     try:
         cursor.execute(query)
         connection.commit()
         print("Query executed successfully")
     except Error as e:
         print(f"The error '{e}' occurred")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã language

create_language_table = """
CREATE TABLE IF NOT EXISTS language (
  id INT, 
  lang TEXT
) ENGINE = InnoDB
"""

execute_query(connection, create_language_table)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã mainmenu

create_mainmenu_table = """
CREATE TABLE IF NOT EXISTS mainmenu (
  id INT,
  ua TEXT,
  ru TEXT
) ENGINE = InnoDB
"""

execute_query(connection, create_mainmenu_table)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categorymenu

create_categorymenu_table = """
CREATE TABLE IF NOT EXISTS categorymenu (
  id INT, 
  ua TEXT,
  ru TEXT
) ENGINE = InnoDB
"""

execute_query(connection, create_categorymenu_table)

# –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü

def execute_read_query(connection, query):
    cursor = connection.cursor()
    result = None
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        return result
    except Error as e:
        print(f"The error '{e}' occurred")
	
#–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ language

print ("\n–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ø–∑—ã–∫–∏:\n")

list_temp = [(1 , '–ó–∞–ª–∏—à–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É üá∫üá¶'),
	(2, '–í—ã–±—Ä–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫')]
	
for i in list_temp[:]:
	print ("–∫–ª—é—á: " + str(i[0]))
	try:
		if (execute_read_query(connection, "SELECT * FROM language WHERE id = " + str(i[0])))[0][0] != i[0]:
			print ("   –ó–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è—é:")
			create_values = ("INSERT INTO `language` (`id`, `lang`) VALUES " + str(i))
			execute_query(connection, create_values)			
		else:
			print ("–í—Ä–æ–¥—å —É–∂–µ –µ—Å—Ç—å..")
			print ("–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:  " + str(execute_read_query(connection, "SELECT * FROM language WHERE id = " + str(i[0]))[0][0]))
	except IndexError:
		create_values = ("INSERT INTO `language` (`id`, `lang`) VALUES " + str(i))
		execute_query(connection, create_values)	

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ main_menu

print ("\n–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n")

list_temp = [(1 , 'üìñ –ú–µ–Ω—é', 'üìñ –ú–µ–Ω—é'),
	(2, 'üòè –ú—ñ–π –∑–∞–∫–∞–∑', 'üòè –ú–æ–π –∑–∞–∫–∞–∑'),
	(3, 'üéÅ –ê–∫—Ü—ñ—ó', 'üéÅ –ê–∫—Ü–∏–∏'),
	(4, 'üòç –£–ª—é–±–ª–µ–Ω–µ', 'üòç –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'),
	(5, '‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏', '‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã'),
	(6, '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏', '‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã'),
	(7, 'üìù –ü—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'üìù –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ'),
	(8, 'üá∫üá¶/üá∑üá∫ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É', 'üá∑üá∫/üá∫üá¶ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫')]
	
for i in list_temp[:]:
	print ("–∫–ª—é—á: " + str(i[0]))
	try:
		if (execute_read_query(connection, "SELECT * FROM mainmenu WHERE id = " + str(i[0])))[0][0] != i[0]:
			print ("   –ó–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è—é:")
			create_values = ("INSERT INTO `mainmenu` (`id`, `ua`, `ru`) VALUES ( " + i)
			execute_query(connection, create_values)			
		else:
			print ("–í—Ä–æ–¥—å —É–∂–µ –µ—Å—Ç—å..")
			print ("–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:  " + str(execute_read_query(connection, "SELECT * FROM mainmenu WHERE id = " + str(i[0]))[0][0]))
	except IndexError:
		create_values = ("INSERT INTO `mainmenu` (`id`, `ua`, `ru`) VALUES " + str(i))
		execute_query(connection, create_values)

# –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã USERS
print ("\n–¢–∞–±–ª–∏—Ü–∞ –Ø–∑—ã–∫–∏:\n")

resvalues = execute_read_query(connection, "SELECT * FROM language")

for resname in resvalues:
	print (resname)

print ("\n–¢–∞–±–ª–∏—Ü–∞ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é:\n")

resvalues = execute_read_query(connection, "SELECT * FROM mainmenu")

for resname in resvalues:
	print (resname)
	
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã

global key_index
global lang
global key_old
#global daydescr
#global datedescr
#global resjob
#global jobuuid
key_index = 0
lang = 2
key_old = 1

print("–ü—Ä–æ–≤–µ—Ä–∫–∞:\n")
print(str(execute_read_query(connection, "SELECT * FROM language")[0][1]))
print(str(execute_read_query(connection, "SELECT * FROM language")[1][1]))

print ("–±–æ—Ç –æ–∫")

#–§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def main_keyboard(userlang):
	mainmarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[0][userlang])
	item2 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[1][userlang])
	item3 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[2][userlang])
	item4 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[3][userlang])
	item5 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[4][userlang])
	item6 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[5][userlang])
	item7 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[6][userlang])
	item8 = types.KeyboardButton(execute_read_query(connection, "SELECT * FROM mainmenu")[7][userlang])
	mainmarkup.add(item1, item2)
	mainmarkup.add(item3, item4)
	mainmarkup.add(item5, item6)
	mainmarkup.add(item7, item8)
	return mainmarkup

# –ú–µ–Ω—é –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
	
@bot.message_handler(commands=['start'])
def welcome(message):

	bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é, {0.first_name}!\n".format(message.from_user, bot.get_me()), parse_mode='html', reply_markup = main_keyboard(1))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞	
	
	markup = telebot.types.InlineKeyboardMarkup()
	markup.add(telebot.types.InlineKeyboardButton(text=(execute_read_query(connection, "SELECT * FROM language")[0][1]), callback_data="ua_lang"))
	markup.add(telebot.types.InlineKeyboardButton(text=(execute_read_query(connection, "SELECT * FROM language")[1][1]), callback_data="ru_lang"))
	bot.send_message(idchatbot, text="–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)

# –£–±–∏—Ä–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@bot.message_handler(commands=['deletekeyboard'])
def start_message(message):
	bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞", reply_markup = types.ReplyKeyboardRemove())
#	bot.send_message(message.chat.id, text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	try:
		if call.data == "ua_lang":
			bot.send_message(call.message.chat.id, "–û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º")
		elif call.data == "ru_lang":
			bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π")
		
#		bot.edit_message_text(chat_id = call.message.chat.id, 
#		  text = "–¢—ã—Ü",
#  		  reply_markup = None
#		 )
	except Exception as e:
		print (repr(e))




	
if __name__ == "__main__":
    bot.polling(none_stop=True)
		